/*
 * LA.java
 *
 * Created on 16. Januar 2004, 13:08
 */

/**
 *
 * @author  Adrian Imfeld
 */

import javax.swing.*; // OptionPane, JPanel, JTextField... 
import java.awt.Component;
import java.awt.event.*;
import java.awt.Font;
import Tools.*;

public class LogicAnalyzer extends javax.swing.JFrame 
{
//    private static int PreferredWidth = 660;
//    private static int PreferredHeight = 540;
    private static final Font LogicFont12Plain = Tools.LoadFont(LogicAnalyzer.class.getClassLoader(), "LogicFont.ttf", Font.PLAIN, 12);    
    private static final Font LogicFont14Plain = Tools.LoadFont(LogicAnalyzer.class.getClassLoader(), "LogicFont.ttf", Font.PLAIN, 14);
    private static final Font LogicFont16Plain = Tools.LoadFont(LogicAnalyzer.class.getClassLoader(), "LogicFont.ttf", Font.PLAIN, 16);

    JOptionPane OptionPane = new JOptionPane();
    
    private String dataFolder = "";

    public LogicAnalyzer() 
    {        
        initComponents();
        //OptionPane.setFont(LogicFont14Plain); // Funktioniert leider nicht...
        SetWindowsLookAndFeelIfSupported();
        jInfPanel.setVisible(false);
        AnalyzeMessager.Init(jAnalyzeTP); // Für die Messages
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        RButtonGroup = new javax.swing.ButtonGroup();
        jExpPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jExpTF = new javax.swing.JTextField();
        jExpAnalyzeButton = new javax.swing.JButton();
        jInfPanel = new javax.swing.JPanel();
        jPremScrollPane = new javax.swing.JScrollPane();
        PremListModel = new DefaultListModel();
        jPremList = new javax.swing.JList(PremListModel);
        jPremTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jAddPremiseButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jInfLabel = new javax.swing.JLabel();
        jInfAnalyeButton = new javax.swing.JButton();
        jInfTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jDelPremiseButton = new javax.swing.JButton();
        jExpRButton = new javax.swing.JRadioButton();
        jInfRButton = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jKonjunktionButton = new javax.swing.JButton();
        jPostsektorButton = new javax.swing.JButton();
        jPraesektorButton = new javax.swing.JButton();
        jRejektionButton = new javax.swing.JButton();
        jDisjunktionButton = new javax.swing.JButton();
        jReplikationButton = new javax.swing.JButton();
        jKonditionalButton = new javax.swing.JButton();
        jShefferButton = new javax.swing.JButton();
        jBikonditionalButton = new javax.swing.JButton();
        jKontravalenzButton = new javax.swing.JButton();
        jPraepensorButton = new javax.swing.JButton();
        jPraenonpensorButton = new javax.swing.JButton();
        jPostpensorButton = new javax.swing.JButton();
        jPostnonpensorButton = new javax.swing.JButton();
        jTautologatorButton = new javax.swing.JButton();
        jAntilogatorButton = new javax.swing.JButton();
        jNegationButton = new javax.swing.JButton();
        jOpenBracketButton = new javax.swing.JButton();
        jCloseBracketButton = new javax.swing.JButton();
        jAnalyzePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jAnalyzeTP = new javax.swing.JTextPane();
        jVersionLabel = new javax.swing.JLabel();
        jAuthorLabel = new javax.swing.JLabel();

        setTitle("Logic Analyzer");
        setName("LAFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jExpPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Logical formula"));
        jExpPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Formula:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 15, 5);
        jExpPanel.add(jLabel1, gridBagConstraints);
        jLabel1.getAccessibleContext().setAccessibleName("Formula:");

        jExpTF.setFont(LogicFont14Plain);
        jExpTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jExpTFKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jExpTFKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 15, 5);
        jExpPanel.add(jExpTF, gridBagConstraints);

        jExpAnalyzeButton.setMnemonic('a');
        jExpAnalyzeButton.setText("Analyze");
        jExpAnalyzeButton.setFocusable(false);
        jExpAnalyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExpAnalyzeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 15, 5);
        jExpPanel.add(jExpAnalyzeButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jExpPanel, gridBagConstraints);
        jExpPanel.getAccessibleContext().setAccessibleName("Logical formula");
        jExpPanel.getAccessibleContext().setAccessibleDescription("");

        jInfPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Logical argument"));
        jInfPanel.setPreferredSize(new java.awt.Dimension(0, 200));
        jInfPanel.setLayout(new java.awt.GridBagLayout());

        jPremScrollPane.setPreferredSize(new java.awt.Dimension(259, 100));

        jPremList.setFont(LogicFont14Plain);
        jPremList.setFocusable(false);
        jPremList.setPreferredSize(new java.awt.Dimension(0, 100));
        jPremScrollPane.setViewportView(jPremList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jInfPanel.add(jPremScrollPane, gridBagConstraints);

        jPremTF.setFont(LogicFont14Plain);
        jPremTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPremTFKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPremTFKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jInfPanel.add(jPremTF, gridBagConstraints);

        jLabel2.setText("Premise:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jInfPanel.add(jLabel2, gridBagConstraints);

        jAddPremiseButton.setMnemonic('h');
        jAddPremiseButton.setText("Add");
        jAddPremiseButton.setFocusable(false);
        jAddPremiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddPremiseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 2);
        jInfPanel.add(jAddPremiseButton, gridBagConstraints);

        jLabel3.setText("Conditional:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jInfPanel.add(jLabel3, gridBagConstraints);

        jInfLabel.setFont(LogicFont14Plain);
        jInfLabel.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jInfPanel.add(jInfLabel, gridBagConstraints);

        jInfAnalyeButton.setMnemonic('a');
        jInfAnalyeButton.setText("Analyze");
        jInfAnalyeButton.setFocusable(false);
        jInfAnalyeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInfAnalyeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jInfPanel.add(jInfAnalyeButton, gridBagConstraints);

        jInfTF.setFont(LogicFont14Plain);
        jInfTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jInfTFKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jInfTFKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jInfPanel.add(jInfTF, gridBagConstraints);

        jLabel4.setText("Conclusion:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jInfPanel.add(jLabel4, gridBagConstraints);

        jDelPremiseButton.setMnemonic('l');
        jDelPremiseButton.setText("Remove");
        jDelPremiseButton.setFocusable(false);
        jDelPremiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDelPremiseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 5);
        jInfPanel.add(jDelPremiseButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jInfPanel, gridBagConstraints);

        RButtonGroup.add(jExpRButton);
        jExpRButton.setSelected(true);
        jExpRButton.setText("Analyze logical formula");
        jExpRButton.setToolTipText("");
        jExpRButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jExpRButtonStateChanged(evt);
            }
        });
        jExpRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExpRButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jExpRButton, gridBagConstraints);

        RButtonGroup.add(jInfRButton);
        jInfRButton.setText("Analyze logical argument");
        jInfRButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jInfRButtonStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jInfRButton, gridBagConstraints);

        jPanel3.setMinimumSize(new java.awt.Dimension(500, 80));
        jPanel3.setPreferredSize(new java.awt.Dimension(660, 90));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jKonjunktionButton.setFont(LogicFont16Plain);
        jKonjunktionButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJKonjunktion));
        jKonjunktionButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJKonjunktion));
        jKonjunktionButton.setFocusable(false);
        jKonjunktionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jKonjunktionButton, gridBagConstraints);

        jPostsektorButton.setFont(LogicFont16Plain);
        jPostsektorButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJPostsektor));
        jPostsektorButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJPostsektor));
        jPostsektorButton.setFocusable(false);
        jPostsektorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jPostsektorButton, gridBagConstraints);

        jPraesektorButton.setFont(LogicFont16Plain);
        jPraesektorButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJPraesektor));
        jPraesektorButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJPraesektor));
        jPraesektorButton.setFocusable(false);
        jPraesektorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jPraesektorButton, gridBagConstraints);

        jRejektionButton.setFont(LogicFont16Plain);
        jRejektionButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJRejektion));
        jRejektionButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJRejektion));
        jRejektionButton.setFocusable(false);
        jRejektionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jRejektionButton, gridBagConstraints);

        jDisjunktionButton.setFont(LogicFont16Plain);
        jDisjunktionButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJDisjunktion));
        jDisjunktionButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJDisjunktion));
        jDisjunktionButton.setFocusable(false);
        jDisjunktionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jDisjunktionButton, gridBagConstraints);

        jReplikationButton.setFont(LogicFont16Plain);
        jReplikationButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJReplikation));
        jReplikationButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJReplikation));
        jReplikationButton.setFocusable(false);
        jReplikationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jReplikationButton, gridBagConstraints);

        jKonditionalButton.setFont(LogicFont16Plain);
        jKonditionalButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJKonditional));
        jKonditionalButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJKonditional));
        jKonditionalButton.setFocusable(false);
        jKonditionalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jKonditionalButton, gridBagConstraints);

        jShefferButton.setFont(LogicFont16Plain);
        jShefferButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJSheffer));
        jShefferButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJSheffer));
        jShefferButton.setFocusable(false);
        jShefferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jShefferButton, gridBagConstraints);

        jBikonditionalButton.setFont(LogicFont16Plain);
        jBikonditionalButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJBikonditional));
        jBikonditionalButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJBikonditional));
        jBikonditionalButton.setFocusable(false);
        jBikonditionalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jBikonditionalButton, gridBagConstraints);

        jKontravalenzButton.setFont(LogicFont16Plain);
        jKontravalenzButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJKontravalenz));
        jKontravalenzButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJKontravalenz));
        jKontravalenzButton.setFocusable(false);
        jKontravalenzButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jKontravalenzButton, gridBagConstraints);

        jPraepensorButton.setFont(LogicFont16Plain);
        jPraepensorButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJPraepensor));
        jPraepensorButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJPraepensor));
        jPraepensorButton.setFocusable(false);
        jPraepensorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jPraepensorButton, gridBagConstraints);

        jPraenonpensorButton.setFont(LogicFont16Plain);
        jPraenonpensorButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJPraenonpensor));
        jPraenonpensorButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJPraenonpensor));
        jPraenonpensorButton.setFocusable(false);
        jPraenonpensorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jPraenonpensorButton, gridBagConstraints);

        jPostpensorButton.setFont(LogicFont16Plain);
        jPostpensorButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJPostpensor));
        jPostpensorButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJPostpensor));
        jPostpensorButton.setFocusable(false);
        jPostpensorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jPostpensorButton, gridBagConstraints);

        jPostnonpensorButton.setFont(LogicFont16Plain);
        jPostnonpensorButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJPostnonpensor));
        jPostnonpensorButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJPostnonpensor));
        jPostnonpensorButton.setFocusable(false);
        jPostnonpensorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jPostnonpensorButton, gridBagConstraints);

        jTautologatorButton.setFont(LogicFont16Plain);
        jTautologatorButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJTautologator));
        jTautologatorButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJTautologator));
        jTautologatorButton.setFocusable(false);
        jTautologatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jTautologatorButton, gridBagConstraints);

        jAntilogatorButton.setFont(LogicFont16Plain);
        jAntilogatorButton.setText(""+Symbols.GetBinJunctorSymbol(Symbols.BJAntilogator));
        jAntilogatorButton.setToolTipText(GetBinJunctorToolTip(Symbols.BJAntilogator));
        jAntilogatorButton.setFocusable(false);
        jAntilogatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jAntilogatorButton, gridBagConstraints);

        jNegationButton.setFont(LogicFont16Plain);
        jNegationButton.setText(""+Symbols.GetUnJunctorSymbol(Symbols.UJNegation));
        jNegationButton.setToolTipText(GetUnJunctorToolTip(Symbols.UJNegation));
        jNegationButton.setActionCommand(""+Symbols.GetUnJunctorSymbol(Symbols.UJNegation));
        jNegationButton.setFocusable(false);
        jNegationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jNegationButton, gridBagConstraints);

        jOpenBracketButton.setFont(LogicFont16Plain);
        jOpenBracketButton.setText(""+Symbols.OpenBracket);
        jOpenBracketButton.setFocusable(false);
        jOpenBracketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jOpenBracketButton, gridBagConstraints);

        jCloseBracketButton.setFont(LogicFont16Plain);
        jCloseBracketButton.setText(""+Symbols.CloseBracket);
        jCloseBracketButton.setFocusable(false);
        jCloseBracketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbolButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jCloseBracketButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel3, gridBagConstraints);

        jAnalyzePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Analysis window"));
        jAnalyzePanel.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setPreferredSize(new java.awt.Dimension(10, 100));

        jAnalyzeTP.setEditable(false);
        jAnalyzeTP.setFont(LogicFont12Plain);
        jAnalyzeTP.setFocusable(false);
        jAnalyzeTP.setPreferredSize(new java.awt.Dimension(7, 100));
        jScrollPane2.setViewportView(jAnalyzeTP);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jAnalyzePanel.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jAnalyzePanel, gridBagConstraints);

        jVersionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jVersionLabel.setText(" Logic Analyzer Version 1.6");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jVersionLabel, gridBagConstraints);

        jAuthorLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jAuthorLabel.setText(" © Adrian Imfeld (aimfeld@aimfeld.ch)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jAuthorLabel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPremTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPremTFKeyReleased
        JunctorCompletion(jPremTF);
    }//GEN-LAST:event_jPremTFKeyReleased

    private void jExpTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jExpTFKeyReleased
        JunctorCompletion(jExpTF);
    }//GEN-LAST:event_jExpTFKeyReleased

    private void jInfTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jInfTFKeyPressed
        if (evt.getKeyChar() == evt.VK_ENTER)
        {
            try // Syntax der Konklusion überprüfen
            {
                SymbolNode inf = Parser.Parse(jInfTF.getText(), null, false);
            }
            catch (SyntaxErrorException e) {
                OptionPane.showMessageDialog(this, "Error in conclusion: "+e.getMessage());
            }
        }        
    }//GEN-LAST:event_jInfTFKeyPressed

    private void jInfTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jInfTFKeyReleased
        JunctorCompletion(jInfTF);
        jInfLabel.setText(GetInfConditional()); // Beim Keypressed Event ist der Text implements Textfeld noch nicht aktualisiert 
    }//GEN-LAST:event_jInfTFKeyReleased

    private void jExpTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jExpTFKeyPressed
        if (evt.getKeyChar() == evt.VK_ENTER)
            jExpAnalyzeButtonActionPerformed(null);
    }//GEN-LAST:event_jExpTFKeyPressed

    private void jPremTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPremTFKeyPressed
        if (evt.getKeyChar() == evt.VK_ENTER)
            jAddPremiseButtonActionPerformed(null);
    }//GEN-LAST:event_jPremTFKeyPressed

    private void jDelPremiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDelPremiseButtonActionPerformed
        if (jPremList.getSelectedIndex() == -1)
            OptionPane.showMessageDialog(this, "Select a premise first!");
        else
        {
            int Index = jPremList.getSelectedIndex();
            PremListModel.removeElementAt(Index);
            ReInitPremList(); // Ein Murks, damit die List scrollt...
            if (PremListModel.size() > 0)
                jPremList.setSelectedIndex(Math.min(Index,PremListModel.size() - 1));
            jPremList.ensureIndexIsVisible(jPremList.getSelectedIndex());
            jInfLabel.setText(GetInfConditional());
        }
    }//GEN-LAST:event_jDelPremiseButtonActionPerformed

    private void jInfAnalyeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInfAnalyeButtonActionPerformed
        if (PremListModel.isEmpty())
            OptionPane.showMessageDialog(this, "First add at least one premise!");
        else if (jInfTF.getText().equals(""))
            OptionPane.showMessageDialog(this, "First add a conclusion!");        
        else
        {
            try // Syntax der Konklusion überprüfen
            {
                SymbolNode inf = Parser.Parse(jInfTF.getText(), null, false);                
            }
            catch (SyntaxErrorException e) {
                OptionPane.showMessageDialog(this, "Error in the conclusion: "+e.getMessage());
                return;
            }
            
            Analyze(GetInfConditional(), true);
        }
    }//GEN-LAST:event_jInfAnalyeButtonActionPerformed

    private void SymbolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SymbolButtonActionPerformed
        String cmd = evt.getActionCommand();
        JTextField tf = null;
        if (jExpTF.isFocusOwner())
            tf = jExpTF;
        else if (jPremTF.isFocusOwner())
            tf = jPremTF;
        else if (jInfTF.isFocusOwner())
            tf = jInfTF;
        else
            OptionPane.showMessageDialog(this, "First click on an input field!");
        
        if (tf != null)
        {
            StringBuffer sb = new StringBuffer(tf.getText());
            int CaretPos = tf.getCaretPosition();
            
            sb.insert(CaretPos, cmd);          
            tf.setText(sb.toString());
            tf.setCaretPosition(CaretPos + 1);
        }
    }//GEN-LAST:event_SymbolButtonActionPerformed

    private void jExpRButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jExpRButtonStateChanged
        if (jExpRButton.isSelected())
        {
            jInfRButton.setSelected(false);
            jPremTF.setText("");   // Eingaben löschen
            jInfTF.setText("");
            jInfLabel.setText("");
            PremListModel.clear();

            jInfPanel.setVisible(false);
            jExpPanel.setVisible(true);
        }
    }//GEN-LAST:event_jExpRButtonStateChanged

    private void jInfRButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jInfRButtonStateChanged
        if (jInfRButton.isSelected())
        {
            jExpRButton.setSelected(false);
            jExpTF.setText(""); // Eingaben löschen
            
            jExpPanel.setVisible(false);
            jInfPanel.setVisible(true);            
        }
    }//GEN-LAST:event_jInfRButtonStateChanged

    private void jExpAnalyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExpAnalyzeButtonActionPerformed
        if (jExpTF.getText().equals(""))
            OptionPane.showMessageDialog(this, "First enter a formula!");
        else
            Analyze(jExpTF.getText(), false);
    }//GEN-LAST:event_jExpAnalyzeButtonActionPerformed

    private void jAddPremiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddPremiseButtonActionPerformed
        if (jPremTF.getText().equals(""))
            OptionPane.showMessageDialog(this, "First enter a premise!");
        else
        {
            try 
            {
                SymbolNode n = Parser.Parse(jPremTF.getText(), null, false);
                PremListModel.addElement(jPremTF.getText());
                
                jInfLabel.setText(GetInfConditional());
                jPremTF.setText("");
                            
                ReInitPremList(); // Ein Murks, damit die List scrollt...
                jPremList.ensureIndexIsVisible(PremListModel.size()-1);
            }
            catch (SyntaxErrorException e) {
                OptionPane.showMessageDialog(this, e.getMessage());
            }
            
        }
    }//GEN-LAST:event_jAddPremiseButtonActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void jExpRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExpRButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jExpRButtonActionPerformed
    
    private void ReInitPremList() {
        jPremList = new javax.swing.JList(PremListModel);
        jPremScrollPane.setViewportView(jPremList);
        jPremList.setFont(LogicFont14Plain);
        jPremList.setFocusable(false);
        jPremList.setFocusable(false);
    }
    
    private void SetWindowsLookAndFeelIfSupported() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {}
    }
        
    private void JunctorCompletion(JTextField tf) {
        String s = tf.getText();
        int OldCaretPos = tf.getCaretPosition();
        int OldLength = s.length();
        
        for (int i=0; i<Symbols.BJCount; i++)
            for (int i2=0; i2<Symbols.BinJunctorCompletion[i].length; i2++)
                s = s.replaceAll(Symbols.BinJunctorCompletion[i][i2], ""+Symbols.GetBinJunctorSymbol(i));
        for (int i=0; i<Symbols.UJCount; i++)
            for (int i2=0; i2<Symbols.UnJunctorCompletion[i].length; i2++)
                s = s.replaceAll(Symbols.UnJunctorCompletion[i][i2], ""+Symbols.GetUnJunctorSymbol(i));
        
        tf.setText(s);
        tf.setCaretPosition(Math.max(0, Math.min(OldCaretPos-(OldLength-s.length()), s.length())));
    }
    
    private String GetInfPremConjunction() {
        StringBuffer exp = new StringBuffer(50);
        for (int i=0; i<PremListModel.size(); i++)      // Prämissen
        {
            exp.append(Symbols.OpenBracket+(String)PremListModel.getElementAt(i)+Symbols.CloseBracket);
            if (i != PremListModel.size() - 1)
                exp.append(Symbols.GetBinJunctorSymbol(Symbols.BJKonjunktion));
        }
        return exp.toString();
    }
    
    private String GetInfConditional() {
        StringBuffer cond = new StringBuffer(50);
        cond.append(GetInfPremConjunction());
        cond.append(Symbols.GetBinJunctorSymbol(Symbols.BJKonditional));
        cond.append(Symbols.OpenBracket+jInfTF.getText()+Symbols.CloseBracket);
        return cond.toString();
    }
    
    private String GetBinJunctorToolTip(int Junctor) {
        StringBuffer sb = new StringBuffer(100);
        sb.append(Symbols.GetBinJunctorName(Junctor) +
        " ("+Symbols.GetBinJunctorDefString(Junctor) + ")" +
        "      Priority: "+Symbols.GetBinJunctorBinding(Junctor));
        if (Symbols.BinJunctorCompletion[Junctor].length > 0) {
            sb.append("      Enter as: ");
            for (int i=0; i<Symbols.BinJunctorCompletion[Junctor].length; i++)
                sb.append("\"" + Symbols.BinJunctorCompletion[Junctor][i] + "\"" +
                (i < Symbols.BinJunctorCompletion[Junctor].length-1 ? ", " : ""));
        }
        return sb.toString();
    }
    
    private String GetUnJunctorToolTip(int Junctor) {
        StringBuffer sb = new StringBuffer(100);
        sb.append(Symbols.GetUnJunctorName(Junctor) +
        "      Priority: "+Symbols.GetUnJunctorBinding(Junctor));
        if (Symbols.UnJunctorCompletion[Junctor].length > 0) {
            sb.append("    Enter as: ");
            for (int i=0; i<Symbols.UnJunctorCompletion[Junctor].length; i++)
                sb.append("\"" + Symbols.UnJunctorCompletion[Junctor][i] + "\"" +
                (i < Symbols.UnJunctorCompletion[Junctor].length-1 ? ", " : ""));
        }
        return sb.toString();
    }
    
    private void Analyze(String Expression, boolean Inference) {
        try {
            jAnalyzeTP.setText("");
            
            AnalyzeMessager.AnalyzeMessage("PARSING...");
            SymbolNode n = Parser.Parse(Expression, null, true);
            
            AnalyzeMessager.AnalyzeMessage("");
            AnalyzeMessager.AnalyzeMessage("CALCULATING TRUTHTABLE...");
            n.CalculateTruthTable(true);
            
            TruthTableFrame ttf = new TruthTableFrame(n);
            ttf.show();
            
            AnalyzeMessager.AnalyzeMessage("");
            
            if (Inference) {
                if (n.IsTautology()) {
                    AnalyzeMessager.AnalyzeMessage(n.GetExpression()+" is a tautology, i.e. the argument is valid.");
                    SymbolNode prn = Parser.Parse(GetInfPremConjunction(), null, false);
                    prn.CalculateTruthTable(false);
                    if (prn.IsAntilogy())
                        AnalyzeMessager.AnalyzeMessage("But the premises contain a contradiction, therefore any conclusion is valid.");
                    else
                        AnalyzeMessager.AnalyzeMessage("The premises are valid and contain no contradiction.");
                }
                else
                    AnalyzeMessager.AnalyzeMessage(n.GetExpression()+" is not a tautology, i.e. the argument is invalid.");
                
            }
            else {
                if (n.IsTautology())
                    AnalyzeMessager.AnalyzeMessage(n.GetExpression()+" is a tautology");
                else if (n.IsAntilogy())
                    AnalyzeMessager.AnalyzeMessage(n.GetExpression()+" is an antilogy");
                else
                    AnalyzeMessager.AnalyzeMessage(n.GetExpression()+" is neither a tautology nor an antilogy");
            }
        }
        catch (SyntaxErrorException e) {
            OptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    public static void main(String args[]) 
    {
        new LogicAnalyzer().show();        
    }
    
    private DefaultListModel PremListModel;  // Für dynamische Änderung von JPremList
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup RButtonGroup;
    private javax.swing.JButton jAddPremiseButton;
    private javax.swing.JPanel jAnalyzePanel;
    private javax.swing.JTextPane jAnalyzeTP;
    private javax.swing.JButton jAntilogatorButton;
    private javax.swing.JLabel jAuthorLabel;
    private javax.swing.JButton jBikonditionalButton;
    private javax.swing.JButton jCloseBracketButton;
    private javax.swing.JButton jDelPremiseButton;
    private javax.swing.JButton jDisjunktionButton;
    private javax.swing.JButton jExpAnalyzeButton;
    private javax.swing.JPanel jExpPanel;
    private javax.swing.JRadioButton jExpRButton;
    private javax.swing.JTextField jExpTF;
    private javax.swing.JButton jInfAnalyeButton;
    private javax.swing.JLabel jInfLabel;
    private javax.swing.JPanel jInfPanel;
    private javax.swing.JRadioButton jInfRButton;
    private javax.swing.JTextField jInfTF;
    private javax.swing.JButton jKonditionalButton;
    private javax.swing.JButton jKonjunktionButton;
    private javax.swing.JButton jKontravalenzButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton jNegationButton;
    private javax.swing.JButton jOpenBracketButton;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jPostnonpensorButton;
    private javax.swing.JButton jPostpensorButton;
    private javax.swing.JButton jPostsektorButton;
    private javax.swing.JButton jPraenonpensorButton;
    private javax.swing.JButton jPraepensorButton;
    private javax.swing.JButton jPraesektorButton;
    private javax.swing.JList jPremList;
    private javax.swing.JScrollPane jPremScrollPane;
    private javax.swing.JTextField jPremTF;
    private javax.swing.JButton jRejektionButton;
    private javax.swing.JButton jReplikationButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jShefferButton;
    private javax.swing.JButton jTautologatorButton;
    private javax.swing.JLabel jVersionLabel;
    // End of variables declaration//GEN-END:variables
    
}
